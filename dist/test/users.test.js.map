{"version":3,"sources":["../../src/test/users.test.ts"],"sourcesContent":["import { PrismaClient, User } from '@prisma/client';\nimport bcrypt from 'bcrypt';\nimport request from 'supertest';\nimport App from '@/app';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport UserRoute from '@routes/users.route';\n\nafterAll(async () => {\n  await new Promise<void>(resolve => setTimeout(() => resolve(), 500));\n});\n\ndescribe('Testing Users', () => {\n  describe('[GET] /users', () => {\n    it('response findAll users', async () => {\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findMany = jest.fn().mockReturnValue([\n        {\n          id: 1,\n          email: 'a@email.com',\n          password: await bcrypt.hash('q1w2e3r4!', 10),\n        },\n        {\n          id: 2,\n          email: 'b@email.com',\n          password: await bcrypt.hash('a1s2d3f4!', 10),\n        },\n        {\n          id: 3,\n          email: 'c@email.com',\n          password: await bcrypt.hash('z1x2c3v4!', 10),\n        },\n      ]);\n\n      const app = new App([usersRoute]);\n      return request(app.getServer()).get(`${usersRoute.path}`).expect(200);\n    });\n  });\n\n  describe('[GET] /users/:id', () => {\n    it('response findOne user', async () => {\n      const userId = 1;\n\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findUnique = jest.fn().mockReturnValue({\n        id: 1,\n        email: 'a@email.com',\n        password: await bcrypt.hash('q1w2e3r4!', 10),\n      });\n\n      const app = new App([usersRoute]);\n      return request(app.getServer()).get(`${usersRoute.path}/${userId}`).expect(200);\n    });\n  });\n\n  describe('[POST] /users', () => {\n    it('response Create user', async () => {\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findUnique = jest.fn().mockReturnValue(null);\n      users.create = jest.fn().mockReturnValue({\n        id: 1,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      const app = new App([usersRoute]);\n      return request(app.getServer()).post(`${usersRoute.path}`).send(userData).expect(201);\n    });\n  });\n\n  describe('[PUT] /users/:id', () => {\n    it('response Update user', async () => {\n      const userId = 1;\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findUnique = jest.fn().mockReturnValue({\n        id: userId,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n      users.update = jest.fn().mockReturnValue({\n        id: userId,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      const app = new App([usersRoute]);\n      return request(app.getServer()).put(`${usersRoute.path}/${userId}`).send(userData).expect(200);\n    });\n  });\n\n  describe('[DELETE] /users/:id', () => {\n    it('response Delete user', async () => {\n      const userId = 1;\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findUnique = jest.fn().mockReturnValue({\n        id: userId,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n      users.delete = jest.fn().mockReturnValue({\n        id: userId,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      const app = new App([usersRoute]);\n      return request(app.getServer()).delete(`${usersRoute.path}/${userId}`).expect(200);\n    });\n  });\n});\n"],"names":["afterAll","Promise","resolve","setTimeout","describe","it","usersRoute","UserRoute","users","usersController","userService","findMany","jest","fn","mockReturnValue","id","email","password","bcrypt","hash","app","App","request","getServer","get","path","expect","userId","findUnique","userData","create","post","send","update","put","delete"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}