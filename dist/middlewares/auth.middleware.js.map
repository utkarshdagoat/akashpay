{"version":3,"sources":["../../src/middlewares/auth.middleware.ts"],"sourcesContent":["import { PrismaClient, kycStatus } from '@prisma/client';\nimport { NextFunction, Response } from 'express';\nimport { verify } from 'jsonwebtoken';\nimport { SECRET_KEY } from '@config';\nimport { HttpException } from '@exceptions/HttpException';\nimport { DataStoredInToken, RequestWithUser } from '@interfaces/auth.interface';\n\nconst getAuthorization = (req) => {\n  const cookie = req.cookies['Authorization'];\n  if (cookie) return cookie;\n\n  const header = req.header('Authorization');\n  if (header) return header.split('Bearer ')[1];\n\n  return null;\n}\n\nexport const AuthMiddleware = async (req: RequestWithUser, res: Response, next: NextFunction) => {\n  try {\n    const Authorization = getAuthorization(req);\n\n    if (Authorization) {\n      const { id } = (await verify(Authorization, SECRET_KEY)) as DataStoredInToken;\n      const users = new PrismaClient().user;\n      const findUser = await users.findUnique({ where: { id: Number(id) } });\n\n      if (findUser) {\n        req.user = findUser;\n        next();\n      } else {\n        next(new HttpException(401, 'Wrong authentication token'));\n      }\n    } else {\n      next(new HttpException(404, 'Authentication token missing'));\n    }\n  } catch (error) {\n    next(new HttpException(401, 'Wrong authentication token'));\n  }\n};\n\nexport const EnsureKYC = async (req: RequestWithUser, res: Response, next: NextFunction) => {\n  const kyc = new PrismaClient().kYC;\n  try {\n    const kycData = await kyc.findFirst({ where: { userId: req.user.id } });\n    if(!kycData) {\n      next(new HttpException(401, 'User has not completed KYC'));\n    }else{\n      if(kycData.status != kycStatus.APPROVED){\n        next(new HttpException(401, 'User KYC is not approved'));\n      }else{\n        next();\n      }\n    }\n  } catch (error) {\n    next(error) \n  }\n}\n"],"names":["AuthMiddleware","EnsureKYC","getAuthorization","req","cookie","cookies","header","split","res","next","Authorization","id","verify","SECRET_KEY","users","PrismaClient","user","findUser","findUnique","where","Number","HttpException","error","kyc","kYC","kycData","findFirst","userId","status","kycStatus","APPROVED"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAiBaA,cAAc;eAAdA;;IAuBAC,SAAS;eAATA;;;wBAxC2B;8BAEjB;wBACI;+BACG;AAG9B,MAAMC,mBAAmB,CAACC;IACxB,MAAMC,SAASD,IAAIE,OAAO,CAAC,gBAAgB;IAC3C,IAAID,QAAQ,OAAOA;IAEnB,MAAME,SAASH,IAAIG,MAAM,CAAC;IAC1B,IAAIA,QAAQ,OAAOA,OAAOC,KAAK,CAAC,UAAU,CAAC,EAAE;IAE7C,OAAO;AACT;AAEO,MAAMP,iBAAiB,OAAOG,KAAsBK,KAAeC;IACxE,IAAI;QACF,MAAMC,gBAAgBR,iBAAiBC;QAEvC,IAAIO,eAAe;YACjB,MAAM,EAAEC,EAAE,EAAE,GAAI,MAAMC,IAAAA,oBAAM,EAACF,eAAeG,kBAAU;YACtD,MAAMC,QAAQ,IAAIC,oBAAY,GAAGC,IAAI;YACrC,MAAMC,WAAW,MAAMH,MAAMI,UAAU,CAAC;gBAAEC,OAAO;oBAAER,IAAIS,OAAOT;gBAAI;YAAE;YAEpE,IAAIM,UAAU;gBACZd,IAAIa,IAAI,GAAGC;gBACXR;YACF,OAAO;gBACLA,KAAK,IAAIY,4BAAa,CAAC,KAAK;YAC9B;QACF,OAAO;YACLZ,KAAK,IAAIY,4BAAa,CAAC,KAAK;QAC9B;IACF,EAAE,OAAOC,OAAO;QACdb,KAAK,IAAIY,4BAAa,CAAC,KAAK;IAC9B;AACF;AAEO,MAAMpB,YAAY,OAAOE,KAAsBK,KAAeC;IACnE,MAAMc,MAAM,IAAIR,oBAAY,GAAGS,GAAG;IAClC,IAAI;QACF,MAAMC,UAAU,MAAMF,IAAIG,SAAS,CAAC;YAAEP,OAAO;gBAAEQ,QAAQxB,IAAIa,IAAI,CAACL,EAAE;YAAC;QAAE;QACrE,IAAG,CAACc,SAAS;YACXhB,KAAK,IAAIY,4BAAa,CAAC,KAAK;QAC9B,OAAK;YACH,IAAGI,QAAQG,MAAM,IAAIC,iBAAS,CAACC,QAAQ,EAAC;gBACtCrB,KAAK,IAAIY,4BAAa,CAAC,KAAK;YAC9B,OAAK;gBACHZ;YACF;QACF;IACF,EAAE,OAAOa,OAAO;QACdb,KAAKa;IACP;AACF"}