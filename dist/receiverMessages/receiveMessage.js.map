{"version":3,"sources":["../../src/receiverMessages/receiveMessage.ts"],"sourcesContent":["/*\n * Copyright (c) 2024, Circle Internet Financial LTD All rights reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"dotenv/config\"\nimport { DirectSecp256k1HdWallet, Registry, GeneratedType } from \"@cosmjs/proto-signing\";\nimport { SigningStargateClient } from \"@cosmjs/stargate\";\nimport { MsgReceiveMessage } from \"./generated/tx\";\n\nexport const cctpTypes: ReadonlyArray<[string, GeneratedType]> = [\n    [\"/circle.cctp.v1.MsgReceiveMessage\", MsgReceiveMessage],\n];\n\nfunction createDefaultRegistry(): Registry {\n    return new Registry(cctpTypes)\n};\n\nexport const recieveMessage= async (mnemonic:string , messageHex:string,attestationSignature:string) => {\n\n    const wallet = await DirectSecp256k1HdWallet.fromMnemonic(\n        mnemonic,\n        {\n            prefix: \"noble\"\n        }\n    );\n\n    const [account] = await wallet.getAccounts();\n\n    const client = await SigningStargateClient.connectWithSigner(\n        \"https://rpc.testnet.noble.strange.love\",\n        wallet,\n        {\n            registry: createDefaultRegistry()\n        }\n    );\n\n\n    // Convert the message and attestation from hex to bytes\n\n    const messageBytes = new Uint8Array(Buffer.from(messageHex.replace(\"0x\", \"\"), \"hex\"));\n    const attestationBytes = new Uint8Array(Buffer.from(attestationSignature.replace(\"0x\", \"\"), \"hex\"));\n    \n    console.log(account.address)\n    const msg = {\n        typeUrl: \"/circle.cctp.v1.MsgReceiveMessage\",\n        value: {\n            from: account.address,\n            message: messageBytes,\n            attestation: attestationBytes,\n        }\n    }\n\n    const fee = {\n        amount: [\n            {\n                denom: \"uusdc\",\n                amount: \"0\",\n            },\n        ],\n        gas: \"200000\",\n    };\n    const memo = \"\";\n    const result = await client.signAndBroadcast(\n        account.address,\n        [msg],\n        fee,\n        memo\n    )\n    return result.transactionHash\n}\n"],"names":["cctpTypes","recieveMessage","MsgReceiveMessage","createDefaultRegistry","Registry","mnemonic","messageHex","attestationSignature","wallet","DirectSecp256k1HdWallet","fromMnemonic","prefix","account","getAccounts","client","SigningStargateClient","connectWithSigner","registry","messageBytes","Uint8Array","Buffer","from","replace","attestationBytes","console","log","address","msg","typeUrl","value","message","attestation","fee","amount","denom","gas","memo","result","signAndBroadcast","transactionHash"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAuBaA,SAAS;eAATA;;IAQAC,cAAc;eAAdA;;;QAbN;8BAC0D;0BAC3B;oBACJ;AAE3B,MAAMD,YAAoD;IAC7D;QAAC;QAAqCE,qBAAiB;KAAC;CAC3D;AAED,SAASC;IACL,OAAO,IAAIC,sBAAQ,CAACJ;AACxB;AAEO,MAAMC,iBAAgB,OAAOI,UAAkBC,YAAkBC;IAEpE,MAAMC,SAAS,MAAMC,qCAAuB,CAACC,YAAY,CACrDL,UACA;QACIM,QAAQ;IACZ;IAGJ,MAAM,CAACC,QAAQ,GAAG,MAAMJ,OAAOK,WAAW;IAE1C,MAAMC,SAAS,MAAMC,+BAAqB,CAACC,iBAAiB,CACxD,0CACAR,QACA;QACIS,UAAUd;IACd;IAMJ,MAAMe,eAAe,IAAIC,WAAWC,OAAOC,IAAI,CAACf,WAAWgB,OAAO,CAAC,MAAM,KAAK;IAC9E,MAAMC,mBAAmB,IAAIJ,WAAWC,OAAOC,IAAI,CAACd,qBAAqBe,OAAO,CAAC,MAAM,KAAK;IAE5FE,QAAQC,GAAG,CAACb,QAAQc,OAAO;IAC3B,MAAMC,MAAM;QACRC,SAAS;QACTC,OAAO;YACHR,MAAMT,QAAQc,OAAO;YACrBI,SAASZ;YACTa,aAAaR;QACjB;IACJ;IAEA,MAAMS,MAAM;QACRC,QAAQ;YACJ;gBACIC,OAAO;gBACPD,QAAQ;YACZ;SACH;QACDE,KAAK;IACT;IACA,MAAMC,OAAO;IACb,MAAMC,SAAS,MAAMvB,OAAOwB,gBAAgB,CACxC1B,QAAQc,OAAO,EACf;QAACC;KAAI,EACLK,KACAI;IAEJ,OAAOC,OAAOE,eAAe;AACjC"}