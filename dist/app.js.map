{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import 'reflect-metadata';\nimport compression from 'compression';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport express from 'express';\nimport helmet from 'helmet';\nimport hpp from 'hpp';\nimport morgan from 'morgan';\nimport swaggerJSDoc from 'swagger-jsdoc';\nimport swaggerUi from 'swagger-ui-express';\nimport { NODE_ENV, PORT, LOG_FORMAT, ORIGIN, CREDENTIALS } from '@config';\nimport { Routes } from '@interfaces/routes.interface';\nimport { ErrorMiddleware } from '@middlewares/error.middleware';\nimport { logger, stream } from '@utils/logger';\nimport { createRouteHandler } from 'uploadthing/express';\nimport { uploadRouter } from '@/utils/uploadthing';\n\nexport class App {\n  public app: express.Application;\n  public env: string;\n  public port: string | number;\n\n  constructor(routes: Routes[]) {\n    this.app = express();\n    this.env = NODE_ENV || 'development';\n    this.port = PORT || 3000;\n\n    this.initializeMiddlewares();\n    this.initializeRoutes(routes);\n    this.initializeSwagger();\n    this.initializeErrorHandling();\n  }\n\n  public listen() {\n    this.app.listen(this.port, () => {\n      logger.info(`=================================`);\n      logger.info(`======= ENV: ${this.env} =======`);\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\n      logger.info(`=================================`);\n    });\n  }\n\n  public getServer() {\n    return this.app;\n  }\n\n  private initializeMiddlewares() {\n    this.app.use(morgan(LOG_FORMAT, { stream }));\n    this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\n    this.app.use(hpp());\n    this.app.use(helmet());\n    this.app.use(compression());\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n    this.app.use(cookieParser());\n    this.app.use(\"/api/uploadthing\" , createRouteHandler({\n      router:uploadRouter,\n      config:{\n        uploadthingId:process.env.UPLOADTHING_ID,\n        uploadthingSecret:process.env.UPLOADTHING_SECRET\n      }\n    }))\n  }\n\n  private initializeRoutes(routes: Routes[]) {\n    this.app.get('/api/healthcheck', (req, res) => {\n      res.status(200).send('OK');\n    });\n    routes.forEach(route => {\n      this.app.use('/', route.router);\n    });\n  }\n\n  private initializeSwagger() {\n    const options = {\n      swaggerDefinition: {\n        info: {\n          title: 'REST API',\n          version: '1.0.0',\n          description: 'Example docs',\n        },\n      },\n      apis: ['swagger.yaml'],\n    };\n\n    const specs = swaggerJSDoc(options);\n    this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));\n  }\n\n  private initializeErrorHandling() {\n    this.app.use(ErrorMiddleware);\n  }\n}\n"],"names":["App","listen","app","port","logger","info","env","getServer","initializeMiddlewares","use","morgan","LOG_FORMAT","stream","cors","origin","ORIGIN","credentials","CREDENTIALS","hpp","helmet","compression","express","json","urlencoded","extended","cookieParser","createRouteHandler","router","uploadRouter","config","uploadthingId","process","UPLOADTHING_ID","uploadthingSecret","UPLOADTHING_SECRET","initializeRoutes","routes","get","req","res","status","send","forEach","route","initializeSwagger","options","swaggerDefinition","title","version","description","apis","specs","swaggerJSDoc","swaggerUi","serve","setup","initializeErrorHandling","ErrorMiddleware","constructor","NODE_ENV","PORT"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}