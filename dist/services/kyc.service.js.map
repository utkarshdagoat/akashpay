{"version":3,"sources":["../../src/services/kyc.service.ts"],"sourcesContent":["import { Service } from 'typedi'\nimport { KYC, PrismaClient } from '@prisma/client';\nimport { CreateKYCDto } from '@/dtos/kyc.dto';\nimport { HttpException } from '@/exceptions/HttpException';\nimport { kycStatus } from '@prisma/client';\n@Service()\nexport class KYCService {\n    public kyc = new PrismaClient().kYC;\n\n    public async createKYC(data: CreateKYCDto, userId: number): Promise<any> {\n        try {\n            const findKYC = await this.kyc.findUnique({\n                where: {\n                    userId: userId\n                }\n            })\n            if (findKYC) throw new HttpException(409, `KYC already exists for user ${userId}`)\n            const createKYC = await this.kyc.create({\n                data: {\n                    userId: userId,\n                    firstName: data.firstName,\n                    lastName: data.lastName,\n                    dob: data.dob,\n                    address: data.address,\n                    city: data.city,\n                    state: data.state,\n                    country: data.country,\n                    postalCode: data.postalCode,\n                    idFront: data.idFront,\n                    idBack: data.idBack,\n                    selfie: data.selfie,\n                    status: kycStatus.INPROCESS,\n                }\n            })\n            return createKYC\n        } catch (error) {\n            console.error(error)\n            throw new HttpException(500, 'Cannot create kyc at the moment')\n        }\n\n    }\n\n    public async getKycStatus(userId: number): Promise<any> {\n        try {\n            const findKYC = await this.kyc.findUnique({\n                where: {\n                    userId: userId\n                }\n            })\n            if (!findKYC) throw new HttpException(404, `KYC not found for user ${userId}`)\n            return findKYC.status\n        }catch(error){\n            console.error(error)\n            throw new HttpException(500, 'Cannot get kyc status at the moment')\n        }\n    }\n\n    public async updateKycStatus(userId: number, status: kycStatus): Promise<any> {\n        try {\n            const findKYC = await this.kyc.findUnique({\n                where: {\n                    userId: userId\n                }\n            })\n            if (!findKYC) throw new HttpException(404, `KYC not found for user ${userId}`)\n            const updateKYC = await this.kyc.update({\n                where: {\n                    userId: userId\n                },\n                data: {\n                    status: status\n                }\n            })\n            return updateKYC.status\n        }catch(error){\n            console.error(error)\n            throw new HttpException(500, 'Cannot update kyc status at the moment')\n        }\n    }\n    public getKyc(userId: number): Promise<KYC> {\n        return this.kyc.findUnique({\n            where: {\n                userId: userId\n            }\n        })\n    }\n}"],"names":["KYCService","createKYC","data","userId","findKYC","kyc","findUnique","where","HttpException","create","firstName","lastName","dob","address","city","state","country","postalCode","idFront","idBack","selfie","status","kycStatus","INPROCESS","error","console","getKycStatus","updateKycStatus","updateKYC","update","getKyc","PrismaClient","kYC","Service"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAMaA;;;eAAAA;;;wBANW;wBACU;+BAEJ;;;;;;;;;;;;;;;;;;;;AAGvB,IAAA,AAAMA,aAAN,MAAMA;IAGT,MAAaC,UAAUC,IAAkB,EAAEC,MAAc,EAAgB;QACrE,IAAI;YACA,MAAMC,UAAU,MAAM,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC;gBACtCC,OAAO;oBACHJ,QAAQA;gBACZ;YACJ;YACA,IAAIC,SAAS,MAAM,IAAII,4BAAa,CAAC,KAAK,CAAC,4BAA4B,EAAEL,OAAO,CAAC;YACjF,MAAMF,YAAY,MAAM,IAAI,CAACI,GAAG,CAACI,MAAM,CAAC;gBACpCP,MAAM;oBACFC,QAAQA;oBACRO,WAAWR,KAAKQ,SAAS;oBACzBC,UAAUT,KAAKS,QAAQ;oBACvBC,KAAKV,KAAKU,GAAG;oBACbC,SAASX,KAAKW,OAAO;oBACrBC,MAAMZ,KAAKY,IAAI;oBACfC,OAAOb,KAAKa,KAAK;oBACjBC,SAASd,KAAKc,OAAO;oBACrBC,YAAYf,KAAKe,UAAU;oBAC3BC,SAAShB,KAAKgB,OAAO;oBACrBC,QAAQjB,KAAKiB,MAAM;oBACnBC,QAAQlB,KAAKkB,MAAM;oBACnBC,QAAQC,iBAAS,CAACC,SAAS;gBAC/B;YACJ;YACA,OAAOtB;QACX,EAAE,OAAOuB,OAAO;YACZC,QAAQD,KAAK,CAACA;YACd,MAAM,IAAIhB,4BAAa,CAAC,KAAK;QACjC;IAEJ;IAEA,MAAakB,aAAavB,MAAc,EAAgB;QACpD,IAAI;YACA,MAAMC,UAAU,MAAM,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC;gBACtCC,OAAO;oBACHJ,QAAQA;gBACZ;YACJ;YACA,IAAI,CAACC,SAAS,MAAM,IAAII,4BAAa,CAAC,KAAK,CAAC,uBAAuB,EAAEL,OAAO,CAAC;YAC7E,OAAOC,QAAQiB,MAAM;QACzB,EAAC,OAAMG,OAAM;YACTC,QAAQD,KAAK,CAACA;YACd,MAAM,IAAIhB,4BAAa,CAAC,KAAK;QACjC;IACJ;IAEA,MAAamB,gBAAgBxB,MAAc,EAAEkB,MAAiB,EAAgB;QAC1E,IAAI;YACA,MAAMjB,UAAU,MAAM,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC;gBACtCC,OAAO;oBACHJ,QAAQA;gBACZ;YACJ;YACA,IAAI,CAACC,SAAS,MAAM,IAAII,4BAAa,CAAC,KAAK,CAAC,uBAAuB,EAAEL,OAAO,CAAC;YAC7E,MAAMyB,YAAY,MAAM,IAAI,CAACvB,GAAG,CAACwB,MAAM,CAAC;gBACpCtB,OAAO;oBACHJ,QAAQA;gBACZ;gBACAD,MAAM;oBACFmB,QAAQA;gBACZ;YACJ;YACA,OAAOO,UAAUP,MAAM;QAC3B,EAAC,OAAMG,OAAM;YACTC,QAAQD,KAAK,CAACA;YACd,MAAM,IAAIhB,4BAAa,CAAC,KAAK;QACjC;IACJ;IACOsB,OAAO3B,MAAc,EAAgB;QACxC,OAAO,IAAI,CAACE,GAAG,CAACC,UAAU,CAAC;YACvBC,OAAO;gBACHJ,QAAQA;YACZ;QACJ;IACJ;;QA9EA,uBAAOE,OAAM,IAAI0B,oBAAY,GAAGC,GAAG;;AA+EvC;AAhFahC;IADZiC,IAAAA,eAAO;GACKjC"}