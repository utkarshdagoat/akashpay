{"version":3,"sources":["../../src/services/externalApi.service.ts"],"sourcesContent":["import { Service } from \"typedi\";\nimport { PrismaClient, Session } from \"@prisma/client\";\nimport { HttpException } from \"@/exceptions/HttpException\";\nimport { SessionDto } from \"@/dtos/session.dto\";\nimport { TokenData , DataStoredInToken } from \"@/interfaces/auth.interface\";\nimport { sign } from \"jsonwebtoken\";\n\n@Service()\nexport class ExternalApiService {\n    public session = new PrismaClient().session;\n\n    public createToken(session: Session): TokenData {\n        const dataStoredInToken: DataStoredInToken = { id: session.id };\n\n        const secretKey: string = process.env.SECRET_KEY;\n        const expiresIn: number = 5 * 60 * 1000;\n    \n        return { expiresIn, token: sign(dataStoredInToken, secretKey, { expiresIn }) };\n      }\n    public async creatSession(data: SessionDto){\n        \n        const getSession = await this.session.findUnique({\n            where:{\n                email:data.email\n            }\n        })\n        if(getSession) {\n            const deletSession = await this.session.delete({\n                where: {\n                    email:data.email\n                }\n            })\n        };\n        const newSession = await this.session.create({\n            data: {\n                email:data.email\n            }\n        })\n        const token = this.createToken(\n            newSession\n        )\n        return [token , newSession];\n    }\n    public async getSession(email: string , timestamp: Date){\n        const getSession = await this.session.findUnique({\n            where: {\n                email\n            }\n        })\n        if(getSession.createdAt > timestamp) throw new HttpException(401, 'Session Expired')\n        if(!getSession) throw new HttpException(404, 'Session not found Please Create One first')\n        return getSession;\n    }\n}"],"names":["ExternalApiService","createToken","session","dataStoredInToken","id","secretKey","process","env","SECRET_KEY","expiresIn","token","sign","creatSession","data","getSession","findUnique","where","email","deletSession","delete","newSession","create","timestamp","createdAt","HttpException","PrismaClient","Service"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAQaA;;;eAAAA;;;wBARW;wBACc;+BACR;8BAGT;;;;;;;;;;;;;;;;;;;;AAGd,IAAA,AAAMA,qBAAN,MAAMA;IAGFC,YAAYC,OAAgB,EAAa;QAC5C,MAAMC,oBAAuC;YAAEC,IAAIF,QAAQE,EAAE;QAAC;QAE9D,MAAMC,YAAoBC,QAAQC,GAAG,CAACC,UAAU;QAChD,MAAMC,YAAoB,IAAI,KAAK;QAEnC,OAAO;YAAEA;YAAWC,OAAOC,IAAAA,kBAAI,EAACR,mBAAmBE,WAAW;gBAAEI;YAAU;QAAG;IAC/E;IACF,MAAaG,aAAaC,IAAgB,EAAC;QAEvC,MAAMC,aAAa,MAAM,IAAI,CAACZ,OAAO,CAACa,UAAU,CAAC;YAC7CC,OAAM;gBACFC,OAAMJ,KAAKI,KAAK;YACpB;QACJ;QACA,IAAGH,YAAY;YACX,MAAMI,eAAe,MAAM,IAAI,CAAChB,OAAO,CAACiB,MAAM,CAAC;gBAC3CH,OAAO;oBACHC,OAAMJ,KAAKI,KAAK;gBACpB;YACJ;QACJ;QACA,MAAMG,aAAa,MAAM,IAAI,CAAClB,OAAO,CAACmB,MAAM,CAAC;YACzCR,MAAM;gBACFI,OAAMJ,KAAKI,KAAK;YACpB;QACJ;QACA,MAAMP,QAAQ,IAAI,CAACT,WAAW,CAC1BmB;QAEJ,OAAO;YAACV;YAAQU;SAAW;IAC/B;IACA,MAAaN,WAAWG,KAAa,EAAGK,SAAe,EAAC;QACpD,MAAMR,aAAa,MAAM,IAAI,CAACZ,OAAO,CAACa,UAAU,CAAC;YAC7CC,OAAO;gBACHC;YACJ;QACJ;QACA,IAAGH,WAAWS,SAAS,GAAGD,WAAW,MAAM,IAAIE,4BAAa,CAAC,KAAK;QAClE,IAAG,CAACV,YAAY,MAAM,IAAIU,4BAAa,CAAC,KAAK;QAC7C,OAAOV;IACX;;QA3CA,uBAAOZ,WAAU,IAAIuB,oBAAY,GAAGvB,OAAO;;AA4C/C;AA7CaF;IADZ0B,IAAAA,eAAO;GACK1B"}