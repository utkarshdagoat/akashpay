{"version":3,"sources":["../../src/services/payment.service.ts"],"sourcesContent":["import { Service } from \"typedi\";\nimport axios from 'axios'\nimport { HttpException } from \"@/exceptions/HttpException\";\nimport crypto from 'crypto';\nimport { sign } from 'jsonwebtoken';\nconst GET_ROUTES_API_TESNET = process.env.TESTNET_SQUID_API + '/v1/route';\nconst GET_ROUTES_API_MAINET = process.env.MAINNET_SQUID_API + '/v1/route';\n\n\n\n@Service()\nexport class PaymentService {\n    public async getRoute(net: string, fromAmount: number, toAddress: string) {\n        const api = net === 'mainnet' ? GET_ROUTES_API_MAINET : GET_ROUTES_API_TESNET;\n        const fromChain = net === 'mainnet' ? process.env.TESNET_FROM_CHAIN : process.env.MAINNET_FROM_CHAIN;\n        const toChain = net === 'mainnet' ? process.env.TESNET_TO_CHAIN : process.env.MAINNET_TO_CHAIN;\n        const fromToken = net === 'mainnet' ? process.env.TESNET_FROM_TOKEN : process.env.MAINNET_FROM_TOKEN;\n        const toToken = net === 'mainnet' ? process.env.TESNET_TO_TOKEN : process.env.MAINNET_TO_TOKEN;\n        const fromAddress = process.env.FROM_ADDRESS;\n        const slippage = 10;\n\n        const url = `${api}?fromChain=${fromChain}&toChain=${toChain}&fromToken=${fromToken}&toToken=${toToken}&fromAmount=${fromAmount}&fromAddress=${fromAddress}&toAddress=${toAddress}&slippage=${slippage}`;\n        try {\n            const result = await axios.get(url, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'x-integrator-id': process.env.INTEGRATOR_ID\n                }\n            });\n            const res = await result.data;\n            return res.route;\n        } catch (error) {\n            throw new HttpException(500, 'Unable to find route for cross chain transfer')\n        }\n    }\n\n    public generateToken(requestPath: string, requestMethod: string) {\n        const KEY_NAME = process.env.COINBASE_KEY_NAME;\n        const KEY_SECRET = process.env.COINBASE_KEY_SECRET;\n        const BASE_REQUEST_URI = process.env.COINBASE_URL;\n        const REQUEST_URL = requestMethod + ' ' + BASE_REQUEST_URI + requestPath;\n\n        const token = sign({\n\t\t\tiss: 'coinbase-cloud',\n\t\t\tnbf: Math.floor(Date.now() / 1000),\n\t\t\texp: Math.floor(Date.now() / 1000) + 120,\n\t\t\tsub: KEY_NAME,\n\t\t\tREQUEST_URL\n\t\t},KEY_SECRET,{\n            algorithm: 'ES256',\n            header:{\n                alg: 'ES256',\n                kid:KEY_NAME,\n                nonce: crypto.randomBytes(16).toString('hex')\n            }\n        });\n        return token\n    }\n}\n"],"names":["PaymentService","GET_ROUTES_API_TESNET","process","env","TESTNET_SQUID_API","GET_ROUTES_API_MAINET","MAINNET_SQUID_API","getRoute","net","fromAmount","toAddress","api","fromChain","TESNET_FROM_CHAIN","MAINNET_FROM_CHAIN","toChain","TESNET_TO_CHAIN","MAINNET_TO_CHAIN","fromToken","TESNET_FROM_TOKEN","MAINNET_FROM_TOKEN","toToken","TESNET_TO_TOKEN","MAINNET_TO_TOKEN","fromAddress","FROM_ADDRESS","slippage","url","result","axios","get","headers","INTEGRATOR_ID","res","data","route","error","HttpException","generateToken","requestPath","requestMethod","KEY_NAME","COINBASE_KEY_NAME","KEY_SECRET","COINBASE_KEY_SECRET","BASE_REQUEST_URI","COINBASE_URL","REQUEST_URL","token","sign","iss","nbf","Math","floor","Date","now","exp","sub","algorithm","header","alg","kid","nonce","crypto","randomBytes","toString","Service"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAWaA;;;eAAAA;;;wBAXW;gDACN;+BACY;iDACX;8BACE;;;;;;;;;;;;AACrB,MAAMC,wBAAwBC,QAAQC,GAAG,CAACC,iBAAiB,GAAG;AAC9D,MAAMC,wBAAwBH,QAAQC,GAAG,CAACG,iBAAiB,GAAG;AAKvD,IAAA,AAAMN,iBAAN,MAAMA;IACT,MAAaO,SAASC,GAAW,EAAEC,UAAkB,EAAEC,SAAiB,EAAE;QACtE,MAAMC,MAAMH,QAAQ,YAAYH,wBAAwBJ;QACxD,MAAMW,YAAYJ,QAAQ,YAAYN,QAAQC,GAAG,CAACU,iBAAiB,GAAGX,QAAQC,GAAG,CAACW,kBAAkB;QACpG,MAAMC,UAAUP,QAAQ,YAAYN,QAAQC,GAAG,CAACa,eAAe,GAAGd,QAAQC,GAAG,CAACc,gBAAgB;QAC9F,MAAMC,YAAYV,QAAQ,YAAYN,QAAQC,GAAG,CAACgB,iBAAiB,GAAGjB,QAAQC,GAAG,CAACiB,kBAAkB;QACpG,MAAMC,UAAUb,QAAQ,YAAYN,QAAQC,GAAG,CAACmB,eAAe,GAAGpB,QAAQC,GAAG,CAACoB,gBAAgB;QAC9F,MAAMC,cAActB,QAAQC,GAAG,CAACsB,YAAY;QAC5C,MAAMC,WAAW;QAEjB,MAAMC,MAAM,CAAC,EAAEhB,IAAI,WAAW,EAAEC,UAAU,SAAS,EAAEG,QAAQ,WAAW,EAAEG,UAAU,SAAS,EAAEG,QAAQ,YAAY,EAAEZ,WAAW,aAAa,EAAEe,YAAY,WAAW,EAAEd,UAAU,UAAU,EAAEgB,SAAS,CAAC;QACxM,IAAI;YACA,MAAME,SAAS,MAAMC,cAAK,CAACC,GAAG,CAACH,KAAK;gBAChCI,SAAS;oBACL,gBAAgB;oBAChB,mBAAmB7B,QAAQC,GAAG,CAAC6B,aAAa;gBAChD;YACJ;YACA,MAAMC,MAAM,MAAML,OAAOM,IAAI;YAC7B,OAAOD,IAAIE,KAAK;QACpB,EAAE,OAAOC,OAAO;YACZ,MAAM,IAAIC,4BAAa,CAAC,KAAK;QACjC;IACJ;IAEOC,cAAcC,WAAmB,EAAEC,aAAqB,EAAE;QAC7D,MAAMC,WAAWvC,QAAQC,GAAG,CAACuC,iBAAiB;QAC9C,MAAMC,aAAazC,QAAQC,GAAG,CAACyC,mBAAmB;QAClD,MAAMC,mBAAmB3C,QAAQC,GAAG,CAAC2C,YAAY;QACjD,MAAMC,cAAcP,gBAAgB,MAAMK,mBAAmBN;QAE7D,MAAMS,QAAQC,IAAAA,kBAAI,EAAC;YACxBC,KAAK;YACLC,KAAKC,KAAKC,KAAK,CAACC,KAAKC,GAAG,KAAK;YAC7BC,KAAKJ,KAAKC,KAAK,CAACC,KAAKC,GAAG,KAAK,QAAQ;YACrCE,KAAKhB;YACLM;QACD,GAAEJ,YAAW;YACHe,WAAW;YACXC,QAAO;gBACHC,KAAK;gBACLC,KAAIpB;gBACJqB,OAAOC,eAAM,CAACC,WAAW,CAAC,IAAIC,QAAQ,CAAC;YAC3C;QACJ;QACA,OAAOjB;IACX;AACJ;AA/CahD;IADZkE,IAAAA,eAAO;GACKlE"}