{"version":3,"sources":["../../src/services/auth.service.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nimport { compare, hash } from 'bcrypt';\nimport { sign } from 'jsonwebtoken';\nimport { Service } from 'typedi';\nimport { SECRET_KEY } from '@config';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { DataStoredInToken, TokenData } from '@interfaces/auth.interface';\nimport { User } from '@interfaces/users.interface';\nimport nodemailer from 'nodemailer'\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\nimport { MAIL_SUBJECT, MAIL_BODY } from '@/config/mail';\nimport randomString from 'randomstring';\n\nfunction generateOTP() {\n  return randomString.generate({\n    length: 6,\n    charset: 'numeric'\n  });\n}\n\n@Service()\nexport class AuthService {\n  public users = new PrismaClient().user;\n  public otp = new PrismaClient().oTP;\n\n  public async signup(userData: CreateUserDto): Promise<User> {\n    const findUser: User = await this.users.findUnique({ where: { email: userData.email } });\n\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: Promise<User> = this.users.create({ data: { ...userData, password: hashedPassword } });\n\n    return createUserData;\n  }\n\n  public async login(userData: CreateUserDto): Promise<{ cookie: string; findUser: User }> {\n    const findUser: User = await this.users.findUnique({ where: { email: userData.email } });\n    if (!findUser) throw new HttpException(409, `This email ${userData.email} was not found`);\n\n    const isPasswordMatching: boolean = await compare(userData.password, findUser.password);\n    if (!isPasswordMatching) throw new HttpException(409, \"Password is not matching\");\n\n    const tokenData = this.createToken(findUser);\n    const cookie = this.createCookie(tokenData);\n\n    return { cookie, findUser };\n  }\n\n  public async logout(userData: User): Promise<User> {\n    const findUser: User = await this.users.findFirst({ where: { email: userData.email, password: userData.password } });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public createToken(user: User): TokenData {\n    const dataStoredInToken: DataStoredInToken = { id: user.id };\n    const secretKey: string = SECRET_KEY;\n    const expiresIn: number = 24* 60 * 60 * 1000;\n\n    return { expiresIn, token: sign(dataStoredInToken, secretKey, { expiresIn }) };\n  }\n\n  public createCookie(tokenData: TokenData): string {\n    return `Authorization=${tokenData.token}; HttpOnly; Max-Age=${tokenData.expiresIn};`;\n  }\n\n\n  public async sendOTP(email: string) {\n    try {\n      const OTP = generateOTP()\n      const createOtp = await this.otp.create({ data: { email, code: OTP } })\n      await this.sendMail(email, OTP)\n      return createOtp\n    } catch (error) {\n      return new HttpException(500, 'Unable to send OTP')\n    }\n  }\n\n  public async sendMail(email: string, otp: string): Promise<void> {\n    try {\n      const options: SMTPTransport.Options = {\n        host: process.env.SMTP_HOST,\n        port: Number(process.env.SMTP_PORT),\n        auth: {\n          user: process.env.SMTP_MAIL,\n          pass: process.env.SMTP_APP_PASS,\n        },\n      }\n      const transporter = await nodemailer.createTransport(options)\n\n      const mailOptions = {\n        from: process.env.SMPT_MAIL,\n        to: email,\n        subject: MAIL_SUBJECT,\n        html: MAIL_BODY(otp),\n      };\n\n      const res = await transporter.sendMail(mailOptions)\n      \n    } catch (error) {\n      console.log(error)\n      throw new HttpException(500, 'Unable to send email')\n    }\n\n  }\n\n  public async verifyOTP(email: string, otp: string): Promise<boolean> {\n    const findOtp = await this.otp.findFirst({ where: { email, code: otp } })\n    if (!findOtp) {\n      throw new HttpException(403, 'Invalid OTP')\n    }\n    const deleteOtp = await this.otp.delete({ where: { id: findOtp.id } })\n    return true\n  }\n\n  public async verifyEmail(email: string): Promise<boolean> {\n    try {\n      const findUser = await this.users.findUnique({ where: { email } })\n      const updateUser = await this.users.update({ where: { id: findUser.id }, data: { emailVerified: true } })\n      if (!findUser) {\n        throw new HttpException(404, 'User not found')\n      }\n      if (!updateUser) {\n        throw new HttpException(500, 'Unable to change user email status')\n      }\n      return true\n    } catch (error) {\n      console.error(error)\n      throw new HttpException(500, 'Unable to verify email')\n    }\n\n  }\n}\n"],"names":["AuthService","generateOTP","randomString","generate","length","charset","signup","userData","findUser","users","findUnique","where","email","HttpException","hashedPassword","hash","password","createUserData","create","data","login","isPasswordMatching","compare","tokenData","createToken","cookie","createCookie","logout","findFirst","user","dataStoredInToken","id","secretKey","SECRET_KEY","expiresIn","token","sign","sendOTP","OTP","createOtp","otp","code","sendMail","error","options","host","process","env","SMTP_HOST","port","Number","SMTP_PORT","auth","SMTP_MAIL","pass","SMTP_APP_PASS","transporter","nodemailer","createTransport","mailOptions","from","SMPT_MAIL","to","subject","MAIL_SUBJECT","html","MAIL_BODY","res","console","log","verifyOTP","findOtp","deleteOtp","delete","verifyEmail","updateUser","update","emailVerified","PrismaClient","oTP","Service"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}