{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nimport { hash } from 'bcrypt';\nimport { Service } from 'typedi';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@/exceptions/HttpException';\nimport { User } from '@interfaces/users.interface';\n\n@Service()\nexport class UserService {\n  public user = new PrismaClient().user;\n\n  public async findAllUser(): Promise<User[]> {\n    const allUser: User[] = await this.user.findMany();\n    return allUser;\n  }\n\n  public async findUserById(userId: number): Promise<User> {\n    const findUser: User = await this.user.findUnique({ where: { id: userId } });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public async createUser(userData: CreateUserDto): Promise<User> {\n    const findUser: User = await this.user.findUnique({ where: { email: userData.email } });\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = await this.user.create({ data: { ...userData, password: hashedPassword } });\n    return createUserData;\n  }\n\n  public async updateUser(userId: number, userData: CreateUserDto): Promise<User> {\n    const findUser: User = await this.user.findUnique({ where: { id: userId } });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    const hashedPassword = await hash(userData.password, 10);\n    const updateUserData = await this.user.update({ where: { id: userId }, data: { ...userData, password: hashedPassword } });\n    return updateUserData;\n  }\n\n  public async deleteUser() {\n    const deleteUserData = await this.user.deleteMany();\n  }\n}\n"],"names":["UserService","findAllUser","allUser","user","findMany","findUserById","userId","findUser","findUnique","where","id","HttpException","createUser","userData","email","hashedPassword","hash","password","createUserData","create","data","updateUser","updateUserData","update","deleteUser","deleteUserData","deleteMany","PrismaClient","Service"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAQaA;;;eAAAA;;;wBARgB;wBACR;wBACG;+BAEM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIvB,IAAA,AAAMA,cAAN,MAAMA;IAGX,MAAaC,cAA+B;QAC1C,MAAMC,UAAkB,MAAM,IAAI,CAACC,IAAI,CAACC,QAAQ;QAChD,OAAOF;IACT;IAEA,MAAaG,aAAaC,MAAc,EAAiB;QACvD,MAAMC,WAAiB,MAAM,IAAI,CAACJ,IAAI,CAACK,UAAU,CAAC;YAAEC,OAAO;gBAAEC,IAAIJ;YAAO;QAAE;QAC1E,IAAI,CAACC,UAAU,MAAM,IAAII,4BAAa,CAAC,KAAK;QAE5C,OAAOJ;IACT;IAEA,MAAaK,WAAWC,QAAuB,EAAiB;QAC9D,MAAMN,WAAiB,MAAM,IAAI,CAACJ,IAAI,CAACK,UAAU,CAAC;YAAEC,OAAO;gBAAEK,OAAOD,SAASC,KAAK;YAAC;QAAE;QACrF,IAAIP,UAAU,MAAM,IAAII,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEE,SAASC,KAAK,CAAC,eAAe,CAAC;QAExF,MAAMC,iBAAiB,MAAMC,IAAAA,YAAI,EAACH,SAASI,QAAQ,EAAE;QACrD,MAAMC,iBAAuB,MAAM,IAAI,CAACf,IAAI,CAACgB,MAAM,CAAC;YAAEC,MAAM,wCAAKP;gBAAUI,UAAUF;;QAAiB;QACtG,OAAOG;IACT;IAEA,MAAaG,WAAWf,MAAc,EAAEO,QAAuB,EAAiB;QAC9E,MAAMN,WAAiB,MAAM,IAAI,CAACJ,IAAI,CAACK,UAAU,CAAC;YAAEC,OAAO;gBAAEC,IAAIJ;YAAO;QAAE;QAC1E,IAAI,CAACC,UAAU,MAAM,IAAII,4BAAa,CAAC,KAAK;QAE5C,MAAMI,iBAAiB,MAAMC,IAAAA,YAAI,EAACH,SAASI,QAAQ,EAAE;QACrD,MAAMK,iBAAiB,MAAM,IAAI,CAACnB,IAAI,CAACoB,MAAM,CAAC;YAAEd,OAAO;gBAAEC,IAAIJ;YAAO;YAAGc,MAAM,wCAAKP;gBAAUI,UAAUF;;QAAiB;QACvH,OAAOO;IACT;IAEA,MAAaE,aAAa;QACxB,MAAMC,iBAAiB,MAAM,IAAI,CAACtB,IAAI,CAACuB,UAAU;IACnD;;QAlCA,uBAAOvB,QAAO,IAAIwB,oBAAY,GAAGxB,IAAI;;AAmCvC;AApCaH;IADZ4B,IAAAA,eAAO;GACK5B"}