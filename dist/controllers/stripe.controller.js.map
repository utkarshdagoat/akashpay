{"version":3,"sources":["../../src/controllers/stripe.controller.ts"],"sourcesContent":["import { RequestWithUser } from '@/interfaces/auth.interface';\nimport { NextFunction, Request, Response } from 'express';\nimport { PrismaClient, kycStatus } from '@prisma/client';\nimport Stripe from 'stripe';\nexport class StripeController {\n  public kyc = new PrismaClient().kYC;\n  public stripe = new Stripe(process.env.STRIPE_SECRET_KEY);\n  public OnrampSessionResource = Stripe.StripeResource.extend({\n    create: Stripe.StripeResource.method({\n      method: 'POST',\n      path: 'crypto/onramp_sessions',\n    }),\n  });\n\n  public createPaymentIntent = async (req: RequestWithUser, res: Response, next: NextFunction): Promise<void> => {\n    const { amount } = req.body;\n    try {\n      const kyc = await this.kyc.findUnique({\n        where: {\n          userId: req.user.id\n        }\n      })\n      if (kyc.status !== kycStatus.APPROVED) {\n        res.status(401).send('User KYC is not approved');\n        throw Error\n      }\n      const customer = await this.stripe.customers.create\n        ({\n          name: `${kyc.firstName} ${kyc.lastName}`,\n          address: {\n            line1: kyc.address,\n            postal_code: kyc.postalCode,\n            city: kyc.city,\n            state: kyc.state,\n            country: kyc.country,\n          },\n        });\n      const paymentIntent = await this.stripe.paymentIntents.create({\n        amount,\n        currency: 'usd',\n        description: 'Software development services',\n        customer: customer.id\n      });\n      res.send({\n        clientSecret: paymentIntent.client_secret,\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n}"],"names":["StripeController","kyc","PrismaClient","kYC","stripe","Stripe","process","env","STRIPE_SECRET_KEY","OnrampSessionResource","StripeResource","extend","create","method","path","createPaymentIntent","req","res","next","amount","body","findUnique","where","userId","user","id","status","kycStatus","APPROVED","send","Error","customer","customers","name","firstName","lastName","address","line1","postal_code","postalCode","city","state","country","paymentIntent","paymentIntents","currency","description","clientSecret","client_secret","error"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAIaA;;;eAAAA;;;wBAF2B;iDACrB;;;;;;;;;;;;;;;;;;;AACZ,IAAA,AAAMA,mBAAN,MAAMA;;QACX,uBAAOC,OAAM,IAAIC,oBAAY,GAAGC,GAAG;QACnC,uBAAOC,UAAS,IAAIC,eAAM,CAACC,QAAQC,GAAG,CAACC,iBAAiB;QACxD,uBAAOC,yBAAwBJ,eAAM,CAACK,cAAc,CAACC,MAAM,CAAC;YAC1DC,QAAQP,eAAM,CAACK,cAAc,CAACG,MAAM,CAAC;gBACnCA,QAAQ;gBACRC,MAAM;YACR;QACF;QAEA,uBAAOC,uBAAsB,OAAOC,KAAsBC,KAAeC;YACvE,MAAM,EAAEC,MAAM,EAAE,GAAGH,IAAII,IAAI;YAC3B,IAAI;gBACF,MAAMnB,MAAM,MAAM,IAAI,CAACA,GAAG,CAACoB,UAAU,CAAC;oBACpCC,OAAO;wBACLC,QAAQP,IAAIQ,IAAI,CAACC,EAAE;oBACrB;gBACF;gBACA,IAAIxB,IAAIyB,MAAM,KAAKC,iBAAS,CAACC,QAAQ,EAAE;oBACrCX,IAAIS,MAAM,CAAC,KAAKG,IAAI,CAAC;oBACrB,MAAMC;gBACR;gBACA,MAAMC,WAAW,MAAM,IAAI,CAAC3B,MAAM,CAAC4B,SAAS,CAACpB,MAAM,CAChD;oBACCqB,MAAM,CAAC,EAAEhC,IAAIiC,SAAS,CAAC,CAAC,EAAEjC,IAAIkC,QAAQ,CAAC,CAAC;oBACxCC,SAAS;wBACPC,OAAOpC,IAAImC,OAAO;wBAClBE,aAAarC,IAAIsC,UAAU;wBAC3BC,MAAMvC,IAAIuC,IAAI;wBACdC,OAAOxC,IAAIwC,KAAK;wBAChBC,SAASzC,IAAIyC,OAAO;oBACtB;gBACF;gBACF,MAAMC,gBAAgB,MAAM,IAAI,CAACvC,MAAM,CAACwC,cAAc,CAAChC,MAAM,CAAC;oBAC5DO;oBACA0B,UAAU;oBACVC,aAAa;oBACbf,UAAUA,SAASN,EAAE;gBACvB;gBACAR,IAAIY,IAAI,CAAC;oBACPkB,cAAcJ,cAAcK,aAAa;gBAC3C;YACF,EAAE,OAAOC,OAAO;gBACd/B,KAAK+B;YACP;QACF;;AACF"}