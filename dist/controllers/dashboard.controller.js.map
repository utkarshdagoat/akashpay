{"version":3,"sources":["../../src/controllers/dashboard.controller.ts"],"sourcesContent":["import { NextFunction, Response } from 'express';\nimport { Container } from 'typedi';\nimport { DashboardService } from '@/services/dashboard.service';\nimport { RequestWithUser } from '@/interfaces/auth.interface';\nimport { Application } from '@/interfaces/dashboard.interface';\nexport class DashboardController {\n    public dashboard = Container.get(DashboardService);\n\n    public getApplications = async (req: RequestWithUser, res: Response, next: NextFunction): Promise<void> => {\n        try {\n            const userId = req.user.id;\n            const applications :Application[] = await this.dashboard.getApplications(userId);\n            res.status(200).json(applications);\n        } catch (error) {\n            next(error);\n        }\n    }\n\n    public createApplication = async (req: RequestWithUser, res: Response, next: NextFunction): Promise<void> => {\n        try {\n            const userId = req.user.id;\n            const application = req.body;\n            const newApplicationData  = await this.dashboard.createApplication(application , userId);\n\n            res.status(201).json({ data: newApplicationData });\n        } catch (error) {\n            next(error);\n        }\n    }\n\n    public updateApplication = async (req: RequestWithUser, res: Response, next: NextFunction): Promise<void> => { \n        try {\n            const application = req.body;\n            const id = Number(req.params.id);\n            const updateApplicationData = await this.dashboard.updateApplication(application , id);\n            res.status(200).json({ data: updateApplicationData });\n        } catch (error) {\n            next(error);\n        }\n    }\n    public deleteApplication = async (req: RequestWithUser, res: Response, next: NextFunction): Promise<void> => {\n        try {\n            const id = req.body.id;\n            const deleteApplicationData = await this.dashboard.deleteApplication(id);\n            res.status(200).json({ data: deleteApplicationData });\n        } catch (error) {\n            next(error);\n        }\n    }\n\n   \n}\n"],"names":["DashboardController","dashboard","Container","get","DashboardService","getApplications","req","res","next","userId","user","id","applications","status","json","error","createApplication","application","body","newApplicationData","data","updateApplication","Number","params","updateApplicationData","deleteApplication","deleteApplicationData"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAKaA;;;eAAAA;;;wBAJa;kCACO;;;;;;;;;;;;;;AAG1B,IAAA,AAAMA,sBAAN,MAAMA;;QACT,uBAAOC,aAAYC,iBAAS,CAACC,GAAG,CAACC,kCAAgB;QAEjD,uBAAOC,mBAAkB,OAAOC,KAAsBC,KAAeC;YACjE,IAAI;gBACA,MAAMC,SAASH,IAAII,IAAI,CAACC,EAAE;gBAC1B,MAAMC,eAA8B,MAAM,IAAI,CAACX,SAAS,CAACI,eAAe,CAACI;gBACzEF,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAACF;YACzB,EAAE,OAAOG,OAAO;gBACZP,KAAKO;YACT;QACJ;QAEA,uBAAOC,qBAAoB,OAAOV,KAAsBC,KAAeC;YACnE,IAAI;gBACA,MAAMC,SAASH,IAAII,IAAI,CAACC,EAAE;gBAC1B,MAAMM,cAAcX,IAAIY,IAAI;gBAC5B,MAAMC,qBAAsB,MAAM,IAAI,CAAClB,SAAS,CAACe,iBAAiB,CAACC,aAAcR;gBAEjFF,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEM,MAAMD;gBAAmB;YACpD,EAAE,OAAOJ,OAAO;gBACZP,KAAKO;YACT;QACJ;QAEA,uBAAOM,qBAAoB,OAAOf,KAAsBC,KAAeC;YACnE,IAAI;gBACA,MAAMS,cAAcX,IAAIY,IAAI;gBAC5B,MAAMP,KAAKW,OAAOhB,IAAIiB,MAAM,CAACZ,EAAE;gBAC/B,MAAMa,wBAAwB,MAAM,IAAI,CAACvB,SAAS,CAACoB,iBAAiB,CAACJ,aAAcN;gBACnFJ,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEM,MAAMI;gBAAsB;YACvD,EAAE,OAAOT,OAAO;gBACZP,KAAKO;YACT;QACJ;QACA,uBAAOU,qBAAoB,OAAOnB,KAAsBC,KAAeC;YACnE,IAAI;gBACA,MAAMG,KAAKL,IAAIY,IAAI,CAACP,EAAE;gBACtB,MAAMe,wBAAwB,MAAM,IAAI,CAACzB,SAAS,CAACwB,iBAAiB,CAACd;gBACrEJ,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEM,MAAMM;gBAAsB;YACvD,EAAE,OAAOX,OAAO;gBACZP,KAAKO;YACT;QACJ;;AAGJ"}