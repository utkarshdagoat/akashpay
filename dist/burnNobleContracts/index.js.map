{"version":3,"sources":["../../src/burnNobleContracts/index.js"],"sourcesContent":["require(\"dotenv\").config();\nconst {bech32} = require('bech32')\nconst Web3 = require('web3')\nconst tokenMessengerAbi = require('./abis/cctp/TokenMessenger.json');\nconst usdcAbi = require('./abis/Usdc.json');\n\nconst waitForTransaction = async(web3, txHash) => {\n    let transactionReceipt = await web3.eth.getTransactionReceipt(txHash);\n    while(transactionReceipt != null && transactionReceipt.status === 'FALSE') {\n        transactionReceipt = await web3.eth.getTransactionReceipt(txHash);\n        await new Promise(r => setTimeout(r, 4000));\n    }\n    return transactionReceipt;\n}\n\nexport const burnNoble =  async(ETH_TOKEN_MESSENGER_CONTRACT_ADDRESS , USDC_ETH_CONTRACT_ADDRESS ,ETH_TESTNET_RPC ,ETH_PRIVATE_KEY , nobleAddress , amount ) => {\n    const web3 = new Web3(ETH_TESTNET_RPC);\n    \n    // Add ETH private key used for signing transactions\n    const ethSigner = web3.eth.accounts.privateKeyToAccount(ETH_PRIVATE_KEY);\n    web3.eth.accounts.wallet.add(ethSigner);\n\n\n    // initialize contracts using address and ABI\n    const ethTokenMessengerContract = new web3.eth.Contract(tokenMessengerAbi, ETH_TOKEN_MESSENGER_CONTRACT_ADDRESS, {from: ethSigner.address});\n    const usdcEthContract = new web3.eth.Contract(usdcAbi, USDC_ETH_CONTRACT_ADDRESS, {from: ethSigner.address});\n    console.log('Contracts initialized')\n    \n    // Amount that will be transferred\n    const mintRecipient = bech32.fromWords(bech32.decode(nobleAddress).words)\n\n    // Amount that will be transferred\n\n    const mintRecipientBytes = new Uint8Array(32);\n    mintRecipientBytes.set(mintRecipient, 32 - mintRecipient.length);\n    const mintRecipientHex = web3.utils.bytesToHex(mintRecipientBytes);\n\n    // STEP 1: Approve messenger contract to withdraw from our active eth address\n    const approveTxGas = await usdcEthContract.methods.approve(ETH_TOKEN_MESSENGER_CONTRACT_ADDRESS, amount).estimateGas()\n    const approveTx = await usdcEthContract.methods.approve(ETH_TOKEN_MESSENGER_CONTRACT_ADDRESS, amount).send({gas: approveTxGas})\n    const approveTxReceipt = await waitForTransaction(web3, approveTx.transactionHash);\n\n    // STEP 2: Burn USDC\n    const burnTxGas = await ethTokenMessengerContract.methods.depositForBurn(amount, 4, mintRecipientHex, USDC_ETH_CONTRACT_ADDRESS).estimateGas();\n    const burnTx = await ethTokenMessengerContract.methods.depositForBurn(amount, 4, mintRecipientHex, USDC_ETH_CONTRACT_ADDRESS).send({gas: burnTxGas});\n    const burnTxReceipt = await waitForTransaction(web3, burnTx.transactionHash);\n\n    // STEP 3: Retrieve message bytes from logs\n    const transactionReceipt = await web3.eth.getTransactionReceipt(burnTx.transactionHash);\n    const eventTopic = web3.utils.keccak256('MessageSent(bytes)')\n    const log = transactionReceipt.logs.find((l) => l.topics[0] === eventTopic)\n    const messageBytes = web3.eth.abi.decodeParameters(['bytes'], log.data)[0]\n    const messageHash = web3.utils.keccak256(messageBytes);\n\n    let attestationResponse = {status: 'pending'};\n    while(attestationResponse.status != 'complete') {\n        const response = await fetch(`https://iris-api-sandbox.circle.com/attestations/${messageHash}`);\n        attestationResponse = await response.json()\n        await new Promise(r => setTimeout(r, 2000));\n    }\n\n    const attestationSignature = attestationResponse.attestation;\n    return [messageBytes , attestationSignature]\n   \n\n};\n\n"],"names":["burnNoble","require","config","bech32","Web3","tokenMessengerAbi","usdcAbi","waitForTransaction","web3","txHash","transactionReceipt","eth","getTransactionReceipt","status","Promise","r","setTimeout","ETH_TOKEN_MESSENGER_CONTRACT_ADDRESS","USDC_ETH_CONTRACT_ADDRESS","ETH_TESTNET_RPC","ETH_PRIVATE_KEY","nobleAddress","amount","ethSigner","accounts","privateKeyToAccount","wallet","add","ethTokenMessengerContract","Contract","from","address","usdcEthContract","console","log","mintRecipient","fromWords","decode","words","mintRecipientBytes","Uint8Array","set","length","mintRecipientHex","utils","bytesToHex","approveTxGas","methods","approve","estimateGas","approveTx","send","gas","approveTxReceipt","transactionHash","burnTxGas","depositForBurn","burnTx","burnTxReceipt","eventTopic","keccak256","logs","find","l","topics","messageBytes","abi","decodeParameters","data","messageHash","attestationResponse","response","fetch","json","attestationSignature","attestation"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAeaA;;;eAAAA;;;AAfbC,QAAQ,UAAUC,MAAM;AACxB,MAAM,EAACC,MAAM,EAAC,GAAGF,QAAQ;AACzB,MAAMG,OAAOH,QAAQ;AACrB,MAAMI,oBAAoBJ,QAAQ;AAClC,MAAMK,UAAUL,QAAQ;AAExB,MAAMM,qBAAqB,OAAMC,MAAMC;IACnC,IAAIC,qBAAqB,MAAMF,KAAKG,GAAG,CAACC,qBAAqB,CAACH;IAC9D,MAAMC,sBAAsB,QAAQA,mBAAmBG,MAAM,KAAK,QAAS;QACvEH,qBAAqB,MAAMF,KAAKG,GAAG,CAACC,qBAAqB,CAACH;QAC1D,MAAM,IAAIK,QAAQC,CAAAA,IAAKC,WAAWD,GAAG;IACzC;IACA,OAAOL;AACX;AAEO,MAAMV,YAAa,OAAMiB,sCAAuCC,2BAA2BC,iBAAiBC,iBAAkBC,cAAeC;IAChJ,MAAMd,OAAO,IAAIJ,KAAKe;IAGtB,MAAMI,YAAYf,KAAKG,GAAG,CAACa,QAAQ,CAACC,mBAAmB,CAACL;IACxDZ,KAAKG,GAAG,CAACa,QAAQ,CAACE,MAAM,CAACC,GAAG,CAACJ;IAI7B,MAAMK,4BAA4B,IAAIpB,KAAKG,GAAG,CAACkB,QAAQ,CAACxB,mBAAmBY,sCAAsC;QAACa,MAAMP,UAAUQ,OAAO;IAAA;IACzI,MAAMC,kBAAkB,IAAIxB,KAAKG,GAAG,CAACkB,QAAQ,CAACvB,SAASY,2BAA2B;QAACY,MAAMP,UAAUQ,OAAO;IAAA;IAC1GE,QAAQC,GAAG,CAAC;IAGZ,MAAMC,gBAAgBhC,OAAOiC,SAAS,CAACjC,OAAOkC,MAAM,CAAChB,cAAciB,KAAK;IAIxE,MAAMC,qBAAqB,IAAIC,WAAW;IAC1CD,mBAAmBE,GAAG,CAACN,eAAe,KAAKA,cAAcO,MAAM;IAC/D,MAAMC,mBAAmBnC,KAAKoC,KAAK,CAACC,UAAU,CAACN;IAG/C,MAAMO,eAAe,MAAMd,gBAAgBe,OAAO,CAACC,OAAO,CAAC/B,sCAAsCK,QAAQ2B,WAAW;IACpH,MAAMC,YAAY,MAAMlB,gBAAgBe,OAAO,CAACC,OAAO,CAAC/B,sCAAsCK,QAAQ6B,IAAI,CAAC;QAACC,KAAKN;IAAY;IAC7H,MAAMO,mBAAmB,MAAM9C,mBAAmBC,MAAM0C,UAAUI,eAAe;IAGjF,MAAMC,YAAY,MAAM3B,0BAA0BmB,OAAO,CAACS,cAAc,CAAClC,QAAQ,GAAGqB,kBAAkBzB,2BAA2B+B,WAAW;IAC5I,MAAMQ,SAAS,MAAM7B,0BAA0BmB,OAAO,CAACS,cAAc,CAAClC,QAAQ,GAAGqB,kBAAkBzB,2BAA2BiC,IAAI,CAAC;QAACC,KAAKG;IAAS;IAClJ,MAAMG,gBAAgB,MAAMnD,mBAAmBC,MAAMiD,OAAOH,eAAe;IAG3E,MAAM5C,qBAAqB,MAAMF,KAAKG,GAAG,CAACC,qBAAqB,CAAC6C,OAAOH,eAAe;IACtF,MAAMK,aAAanD,KAAKoC,KAAK,CAACgB,SAAS,CAAC;IACxC,MAAM1B,MAAMxB,mBAAmBmD,IAAI,CAACC,IAAI,CAAC,CAACC,IAAMA,EAAEC,MAAM,CAAC,EAAE,KAAKL;IAChE,MAAMM,eAAezD,KAAKG,GAAG,CAACuD,GAAG,CAACC,gBAAgB,CAAC;QAAC;KAAQ,EAAEjC,IAAIkC,IAAI,CAAC,CAAC,EAAE;IAC1E,MAAMC,cAAc7D,KAAKoC,KAAK,CAACgB,SAAS,CAACK;IAEzC,IAAIK,sBAAsB;QAACzD,QAAQ;IAAS;IAC5C,MAAMyD,oBAAoBzD,MAAM,IAAI,WAAY;QAC5C,MAAM0D,WAAW,MAAMC,MAAM,CAAC,iDAAiD,EAAEH,YAAY,CAAC;QAC9FC,sBAAsB,MAAMC,SAASE,IAAI;QACzC,MAAM,IAAI3D,QAAQC,CAAAA,IAAKC,WAAWD,GAAG;IACzC;IAEA,MAAM2D,uBAAuBJ,oBAAoBK,WAAW;IAC5D,OAAO;QAACV;QAAeS;KAAqB;AAGhD"}