{"version":3,"sources":["../../../src/nobleToOsmo/src/index.ts"],"sourcesContent":["import { RouteData, Squid } from \"@0xsquid/sdk\";\nimport { SigningStargateClient, DeliverTxResponse, coin, SigningStargateClientOptions, GasPrice } from \"@cosmjs/stargate\";\nimport { DirectSecp256k1HdWallet } from \"@cosmjs/proto-signing\";\nimport { fromBech32, toBech32 } from \"@cosmjs/encoding\";\nimport {\n  lookupRoutesForTrade,\n  getPoolsPricesPairs,\n  calculateAmountWithSlippage\n} from '@cosmology/core';\n\nimport { osmosis, FEES } from 'osmojs';\nconst {\n  joinPool,\n  exitPool,\n  exitSwapExternAmountOut,\n  exitSwapShareAmountIn,\n  joinSwapExternAmountIn,\n  joinSwapShareAmountOut,\n  swapExactAmountIn,\n  swapExactAmountOut\n} = osmosis.gamm.v1beta1.MessageComposer.withTypeUrl;\nimport axios from \"axios\";\nimport { Decimal } from \"@cosmjs/math\";\n// Environment\n// add to a file named \".env\" to prevent them being uploaded to github\nimport * as dotenv from \"dotenv\";\nimport { error } from \"console\";\ndotenv.config();\n\nconst mnemonic = process.env.MNEMONIC;\nconst osmosisRpc = process.env.OSMOSIS_RPC_ENDPOINT;\n\n// addresses and IDs\nconst axelarChainId = \"osmo-test-5\";\nconst osmosisChainId = \"grand-1\";\n\n// amount of uosmo to swap\nconst amount = \"1000000\";\n\nconst getSDK = () => {\n  const squid = new Squid({\n    baseUrl: \"https://squid-api-git-feat-cosmos-mainmainnet-0xsquid.vercel.app\",\n  });\n  return squid;\n};\n\nexport const deriveCosmosAddress = (\n  chainPrefix: string,\n  address: string\n): string => {\n  return toBech32(chainPrefix, fromBech32(address).data);\n};\n\nexport const convertNobleToOsmo = async (mnemonic: string, amount: string, nobleRPC: string, channel: string, reciepentAddress: string): Promise<string | null> => {\n  const offlineSigner = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n    prefix: \"noble\"\n  })\n  const signerAddress = (await offlineSigner.getAccounts())[0].address;\n\n  const osmoAddress = deriveCosmosAddress(\"osmo\", reciepentAddress);\n  // console.log(osmoAddress)\n  const signer = await SigningStargateClient.connectWithSigner(\n    nobleRPC,\n    offlineSigner\n  );\n  // console.log(signer)\n  // // instantiate the SDK\n  // const squid = getSDK();\n  // // init the SDK\n  // await squid.init();\n  // console.log(\"Squid inited\");\n  // const getRoute = async () => {\n  //   const fromChain = 'osmo-test-5';\n  //   const toChain = 'osmo-test-5';\n  //   const fromToken = 'uusdc';\n  //   const toToken = 'uakt';\n  //   const fromAmount = '10000';\n  //   const toAddress = 'osmo1ydznk3csckrmtumcj8stehnlw9hefaqvcjpwup';\n  //   const fromAddress = \"noble1ydznk3csckrmtumcj8stehnlw9hefaqvc28kja\";\n  //   const slippage = '1';\n\n  //   const url = `https://testnet.api.squidrouter.com/v1/route?fromChain=${fromChain}&toChain=${toChain}&fromToken=${fromToken}&toToken=${toToken}&fromAmount=${fromAmount}&fromAddress=${fromAddress}&toAddress=${toAddress}&slippage=${slippage}`;\n  //   //?fromChain=${fromChain}&toChain=${toChain}&fromToken=${fromToken}&toToken=${toToken}&fromAmount=${fromAmount}&fromAddress=${fromAddress}&toAddress=${toAddress}&slippage=${slippage}\n  //   try {\n  //     const result = await axios.get(url, {\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         'x-integrator-id': 'akash-pay-922ea47b-06b2-4c2a-9707-ddb0a44b8424'\n  //       }\n  //     });\n  //     console.log(result.status)\n  //     const res = await result.data;\n\n  //     return res;\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // }\n  // const route = (await getRoute()).route as RouteData;\n  // const txInfo = (await squid.executeRoute({\n  //   signer,\n  //   signerAddress,\n  //   route,\n  // })) as DeliverTxResponse;\n\n  // const txLink = `https://www.mintscan.io/osmosis/txs/${txInfo.transactionHash}`;\n  // console.log(`Finished! You can find your transaction here: ${txLink}`);\n  // console.log(amount)\n  try {\n    const txHash = (await signer.sendIbcTokens(\n      signerAddress,\n      osmoAddress,\n      { denom: \"uusdc\", amount: amount },\n      \"transfer\",\n      channel,\n      undefined,\n      new Date().getTime() / 1000 + 300,\n      { amount: [], gas: \"200000\" }\n    )).transactionHash\n    // console.log(txHash)\n    return txHash\n  } catch (error) {\n    console.log(error)\n    return null\n  }\n  //\n  //const osmoSigner = await SigningStargateClient.connectWithSigner(\n  //  osmosisRpc,\n  //  offlineSigner\n  //);\n  //\n  //const akashAddress = deriveCosmosAddress(\"akash\", reciepentAddress);\n  //   const client = await osmosis.ClientFactory.createRPCQueryClient({ rpcEndpoint:\"https://rpc.testnet.osmosis.zone\" });\n  //   const {\n  //   pools,\n  //   prices,\n  //   pairs,\n  //   prettyPools\n  // } = await getPoolsPricesPairs(client);\n  // const tokenIn = coin(amount , \"uusdc\")\n  // const tokenOut = coin(amount ,  \"uakt\")\n  // const tokenInAmount = amount;\n  // const tokenOutAmount= amount;\n\n  // const routes = lookupRoutesForTrade({\n  //   pools,\n  //   trade: {\n  //     ///@ts-ignore\n  //     sell: {\n  //       denom: tokenIn.denom,\n  //       amount: tokenInAmount\n  //     },\n  //     ///@ts-ignore\n  //     buy: {\n  //       denom: tokenOut.denom,\n  //       amount: tokenOutAmount\n  //     },\n  //     beliefValue: \"100000\",\n  //   },\n  //   pairs\n  // }).map((tradeRoute) => {\n  //   const {\n  //     poolId,\n  //     tokenOutDenom\n  //   } = tradeRoute;\n  //   return {\n  //     poolId,\n  //     tokenOutDenom\n  //   };\n  // });\n\n\n  // const tokenOutMinAmount = calculateAmountWithSlippage(\n  //   amount,\n  //   \"1\"\n  // );\n\n  // const fee = FEES.osmosis.swapExactAmountIn('low'); // low, medium, high\n  // ///@ts-ignore\n  // const msg = swapExactAmountIn({\n  //   sender: signerAddress, // osmo address\n  //   ///@ts-ignore\n  //   routes, // TradeRoute \n  //   tokenIn, // Coin\n  //   tokenOutMinAmount // number as string with no decimals\n  // });\n  // const result = await signer.signAndBroadcast(\n  //       signerAddress,\n  //       [msg],\n  //       fee,\n  //       'swap tokens'\n  //     );\n  // try {\n  //   const txHash = (await osmosigner.sendIbcTokens(\n  //     signerAddress,\n  //     akashAddress,\n  //     { denom: \"uakt\", amount: amount },\n  //     \"transfer\",\n  //     channel, // Akash Osmo channel\n  //     undefined,\n  //     new Date().getTime() / 1000 + 300,\n  //     { amount: [], gas: \"200000\" }\n  //   )).transactionHash\n  //   // console.log(txHash)\n  //   return txHash\n  // } catch (error) {\n  //   console.log(error)\n  //   return null\n  // }\n}\n\n\n"],"names":["convertNobleToOsmo","deriveCosmosAddress","joinPool","exitPool","exitSwapExternAmountOut","exitSwapShareAmountIn","joinSwapExternAmountIn","joinSwapShareAmountOut","swapExactAmountIn","swapExactAmountOut","osmosis","gamm","v1beta1","MessageComposer","withTypeUrl","dotenv","config","mnemonic","process","env","MNEMONIC","osmosisRpc","OSMOSIS_RPC_ENDPOINT","axelarChainId","osmosisChainId","amount","getSDK","squid","Squid","baseUrl","chainPrefix","address","toBech32","fromBech32","data","nobleRPC","channel","reciepentAddress","offlineSigner","DirectSecp256k1HdWallet","fromMnemonic","prefix","signerAddress","getAccounts","osmoAddress","signer","SigningStargateClient","connectWithSigner","txHash","sendIbcTokens","denom","undefined","Date","getTime","gas","transactionHash","error","console","log"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAqDaA,kBAAkB;eAAlBA;;IAPAC,mBAAmB;eAAnBA;;;qBA9CoB;0BACsE;8BAC/D;0BACH;wBAOP;kDAeN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAdxB,MAAM,EACJC,QAAQ,EACRC,QAAQ,EACRC,uBAAuB,EACvBC,qBAAqB,EACrBC,sBAAsB,EACtBC,sBAAsB,EACtBC,iBAAiB,EACjBC,kBAAkB,EACnB,GAAGC,eAAO,CAACC,IAAI,CAACC,OAAO,CAACC,eAAe,CAACC,WAAW;AAOpDC,QAAOC,MAAM;AAEb,MAAMC,WAAWC,QAAQC,GAAG,CAACC,QAAQ;AACrC,MAAMC,aAAaH,QAAQC,GAAG,CAACG,oBAAoB;AAGnD,MAAMC,gBAAgB;AACtB,MAAMC,iBAAiB;AAGvB,MAAMC,SAAS;AAEf,MAAMC,SAAS;IACb,MAAMC,QAAQ,IAAIC,UAAK,CAAC;QACtBC,SAAS;IACX;IACA,OAAOF;AACT;AAEO,MAAM1B,sBAAsB,CACjC6B,aACAC;IAEA,OAAOC,IAAAA,kBAAQ,EAACF,aAAaG,IAAAA,oBAAU,EAACF,SAASG,IAAI;AACvD;AAEO,MAAMlC,qBAAqB,OAAOiB,UAAkBQ,QAAgBU,UAAkBC,SAAiBC;IAC5G,MAAMC,gBAAgB,MAAMC,qCAAuB,CAACC,YAAY,CAACvB,UAAU;QACzEwB,QAAQ;IACV;IACA,MAAMC,gBAAgB,AAAC,CAAA,MAAMJ,cAAcK,WAAW,EAAC,CAAE,CAAC,EAAE,CAACZ,OAAO;IAEpE,MAAMa,cAAc3C,oBAAoB,QAAQoC;IAEhD,MAAMQ,SAAS,MAAMC,+BAAqB,CAACC,iBAAiB,CAC1DZ,UACAG;IA6CF,IAAI;QACF,MAAMU,SAAS,AAAC,CAAA,MAAMH,OAAOI,aAAa,CACxCP,eACAE,aACA;YAAEM,OAAO;YAASzB,QAAQA;QAAO,GACjC,YACAW,SACAe,WACA,IAAIC,OAAOC,OAAO,KAAK,OAAO,KAC9B;YAAE5B,QAAQ,EAAE;YAAE6B,KAAK;QAAS,EAC9B,EAAGC,eAAe;QAElB,OAAOP;IACT,EAAE,OAAOQ,OAAO;QACdC,QAAQC,GAAG,CAACF;QACZ,OAAO;IACT;AAqFF"}